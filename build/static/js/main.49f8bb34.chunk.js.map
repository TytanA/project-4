{"version":3,"sources":["utils/tokenService.js","utils/userService.js","components/Header/Header.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/AddPost/AddPost.jsx","components/PostCard/PostCard.jsx","components/PostGallery/PostGallery.jsx","utils/postApi.js","pages/Feed/Feed.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","response","console","log","Error","err","tokenService","logout","login","creds","headers","Headers","stringify","getUser","PageHeader","loggedUser","handleLogout","Header","as","to","Icon","name","onClick","SignUpPage","props","useState","message","passwordError","setError","username","email","password","passwordConf","state","setState","selectedFile","setSelectedFile","handleChange","e","target","value","a","preventDefault","key","formData","FormData","append","userService","handleSignUporLogin","Navigate","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","color","Form","size","onSubmit","Segment","stacked","Input","placeholder","onChange","required","icon","iconPosition","type","Field","files","Button","fluid","Message","LoginPage","navigate","useNavigate","handleSignUpOrLogin","AddPost","title","ingredients","directions","handleAddPost","className","PostGallery","create","post","getAll","Feed","posts","setPosts","postsAPI","data","useEffect","getPosts","centered","Row","App","setUser","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.49f8bb34.chunk.js","sourcesContent":["function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    \n    // Writing your error handling like this allows you to throw the error response \n    // to the catch block where signup occurs,  \n\n//     res.status(400).json({ err: \"Something went wrong\" }); notice err, and response.err match\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup, \n  logout,\n  login,\n  getUser\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header, Icon } from 'semantic-ui-react'\n\n\nexport default function PageHeader({ loggedUser, handleLogout, user }) {\n\n    if (user) {\n        return (\n            <Header as='h2'>\n                <Link to='/'>\n                    <Icon name='home'></Icon>\n                </Link>\n                <Link to='' onClick={handleLogout}>\n                    Logout\n                </Link>\n            </Header>\n        )\n    }\n    else{\n        return (\n            <Header as='h2'>\n                <Link to='/'>\n                    <Icon name='home'></Icon>\n                </Link>\n                <Link to='/signup'>\n                    Sign Up\n                </Link>\n                <Link to='/login'>\n                    Login\n                </Link>\n            </Header>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\n\nimport userService from \"../../utils/userService\";\nimport { Navigate, useNavigate, Link } from \"react-router-dom\";\nimport { PinpointEmail } from \"aws-sdk\";\n\nimport PageHeader from '../../components/Header/Header'\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\n\nexport default function SignUpPage(props) {\n  const [error, setError] = useState({\n    message: '',\n    passwordError: false\n  });\n  const [state, setState] = useState({\n    username: '',\n    email: '',\n    password: '',\n    passwordConf: ''\n  })\n  const [selectedFile, setSelectedFile] = useState('');\n\n\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (state.password !== state.passwordConf) return setError({ message: 'Passwords Must Match!', passwordError: true });\n    const formData = new FormData();\n    formData.append('photo', selectedFile);\n    for (let key in state) {\n      formData.append(key, state[key])\n    }\n    try {\n      await userService.signup(formData);\n      props.handleSignUporLogin();\n      Navigate('/');\n    } catch (err) {\n      console.log(err)\n      setError({ message: err.message })\n    }\n  }\n\n  function handleFileInput(e) {\n    console.log(e.target.files, '<-this is the uploading file')\n    setSelectedFile(e.target.files[0]);\n  }\n\n\n  return (\n    <>\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='teal' textAlign='center'>\n          Signup for your account\n        </Header>\n        <Form size='large' onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name='username'\n              placeholder='username'\n              value={state.username}\n              onChange={handleChange}\n              required />\n            <Form.Input\n              name='email'\n              placeholder='email'\n              value={state.email}\n              onChange={handleChange}\n              required />\n            <Form.Input\n              icon='lock'\n              iconPosition='left'\n              name='password'\n              placeholder='password'\n              value={state.password}\n              onChange={handleChange}\n              type='password'\n              required />\n            <Form.Input\n              icon='lock'\n              iconPosition='left'\n              name='passwordConf'\n              placeholder='Confirm Password'\n              value={state.passwordConf}\n              onChange={handleChange}\n              type='password'\n              required />\n            <Form.Field>\n              <label>Upload a Profile Picture</label>\n              <Form.Input\n                type='file'\n                name='photo'\n                placeholder='upload image'\n                onChange={handleFileInput}\n              />\n            </Form.Field>\n            <Button type='submit' color='teal' fluid size='large'>\n              Signup\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          Already a member? <Link to='/login'>Login</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport \"./LoginPage.css\";\n\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\n\nexport default function LoginPage(props) {\n  const [error, setError] = useState('');\n  const [state, setState] = useState({\n    email: '',\n    password: ''\n  })\n\n  const navigate = useNavigate()\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    \n    try{\n      await userService.login(state);\n      props.handleSignUpOrLogin();\n      navigate('/')\n    }catch(err){\n\n    }\n\n\n  }\n  return (\n    <Grid onSubmit={handleSubmit} textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='teal' textAlign='center'>\n        </Header>\n        <Form size='large'>\n          <Segment stacked>\n            <Form.Input\n              fluid\n              icon='user'\n              iconPosition='left'\n              placeholder='E-mail address'\n              onChange={handleChange} \n              required/>\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n              onChange={handleChange}\n              required/>\n\n            <Button\n              type='submit'\n              color='teal'\n              fluid size='large'>\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          New to us? <Link to='/signup'>Sign Up</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, Form, Segment } from 'semantic-ui-react'\n\nexport default function AddPost(props) {\n    const [state, setState] = useState({\n        title: '',\n        ingredients: '',\n        directions: ''\n    })\n\n    const [selectedFile, setSelectedFile] = useState('')\n\n    function handleFileInput(e) {\n        setSelectedFile(e.target.files[0])\n    }\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log('you are pressing the button')\n        const formData = new FormData();\n        formData.append('photo', selectedFile)\n        for (let key in state) {\n            formData.append(key, state[key])\n        }\n        props.handleAddPost(formData);\n    }\n\n    return (\n        <Segment>\n            <Form onSubmit={handleSubmit}>\n                <Form.Input\n                    className=\"form-control\"\n                    name=\"title\"\n                    value={state.title}\n                    placeholder=\"What do you call this Disaster?\"\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Input\n                    className=\"form-control\"\n                    name=\"ingredients\"\n                    value={state.ingredients}\n                    placeholder=\"What are the ingredients and amounts?\"\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Input\n                    className=\"form-control\"\n                    name=\"directions\"\n                    value={state.directions}\n                    placeholder=\"How do you make this disaster?\"\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Field>\n                    <Form.Input\n                        type=\"file\"\n                        name=\"photo\"\n                        placeholder=\"upload image\"\n                        onChange={handleFileInput}\n                    />\n                </Form.Field>\n                <Button type=\"submit\" className=\"btn\">\n                    Add Disaster\n                </Button>\n            </Form>\n        </Segment>\n    );\n\n\n}","import React from 'react';\n\n\n\nexport default function PostGallery(){\n    return(\n    <>\n    <h1>This is the PostCard</h1>\n    </>\n    )\n}","import React from 'react';\n\nimport PostCard from '../../components/PostCard/PostCard'\n\n\nexport default function PostGallery(){\n    return(\n    <>\n    <h1>This is the Post Gallery</h1>\n    <PostCard />\n    </>\n    )\n}","import tokenService from \"./tokenService\";\n\nconst BASE_URL = '/api/posts';\n\nexport function create(post) {\n    return fetch(BASE_URL, {\n        method: 'post',\n        body: post,\n        headers: {\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            throw new Error(response.err)\n        })\n    });\n}\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n        headers: {\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then((res) => {\n        if(res.ok) return res.json();\n\n        return res.json().then(response => {\n            throw new Error(response.err)\n        })\n    })\n}","import React, { useState, useEffect } from 'react';\n\nimport PageHeader from '../../components/Header/Header';\nimport AddPost from '../../components/AddPost/AddPost'\nimport PostGallery from '../../components/PostGallery/PostGallery'\n\nimport {  Grid } from 'semantic-ui-react'\n\nimport * as postsAPI from '../../utils/postApi'\n\nexport default function Feed({ loggedUser, handleLogout}) {\n    const [posts, setPosts] = useState([]);\n    const [error, setError] = useState('');\n\n\nasync function handleAddPost(post) {\n\n    try {\n        const response = await postsAPI.create(post)\n        setPosts([response.data, ...posts]);\n    }catch (err) {\n        setError('Error creating post, please try again')\n    }\n}\n\nasync function getPosts() {\n    try{\n        const response = await postsAPI.getAll();\n        setPosts([...response.data])\n    }catch (err) {\n        console.log(err)\n    }\n}\n\nuseEffect(() => {\n\n    getPosts();\n}, [])\n\nreturn (\n    <Grid centered>\n        <Grid.Row>\n            <Grid.Column>\n                <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n            </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n            <Grid.Column>\n                <AddPost handleAddPost={handleAddPost}/>\n            </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n            <Grid.Column style={{ maxWidth: 450 }}>\n                <PostGallery />\n            </Grid.Column>\n         </Grid.Row>\n\n\n\n\n\n\n\n    </Grid>\n)\n\n\n}","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport userService from \"../../utils/userService\";\nimport FeedPage from '../Feed/Feed';\nfunction App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<FeedPage loggedUser={user} handleLogout={handleLogout} />} />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}